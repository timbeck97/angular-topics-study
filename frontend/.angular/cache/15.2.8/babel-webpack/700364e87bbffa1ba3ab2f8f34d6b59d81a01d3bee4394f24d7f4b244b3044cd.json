{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class FormatterDirective {\n  constructor(elementRef) {\n    this.elementRef = elementRef;\n    this.tipo = '';\n    this.el = this.elementRef.nativeElement;\n  }\n  ngOnInit() {\n    this.el.value = this.formatValue(this.el.value);\n  }\n  onChange(value) {\n    this.el.value = this.formatValue(value);\n  }\n  formatValue(value) {\n    if (this.tipo == 'double2Decimal') {\n      return this.formatValorNumeroInput(String(value), 2);\n    }\n    return value;\n  }\n  formatValorNumeroInput(v, casasDecimais) {\n    //Remove tudo o que não é dígito\n    //console.log('formatValorNumeroInput(' + v + ', ' + casasDecimais + ')');\n    var negativo = false;\n    if (v.charAt(0) == '-') {\n      negativo = true;\n    }\n    v = v.replace(/\\D/g, \"\");\n    var regex, partes;\n    //Coloca ponto entre o segundo e o terceiro dígitos\n    if (v.length > casasDecimais) {\n      regex = \"([0-9]{\" + casasDecimais + \"})$\";\n      partes = \",$1\";\n      v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    if (v.length > casasDecimais + 4) {\n      regex = \"([0-9]{3}),([0-9]{\" + casasDecimais + \"}$)\";\n      partes = \".$1,$2\";\n      v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    if (v.length > casasDecimais + 8) {\n      regex = \"([0-9]{3}).([0-9]{3}),([0-9]{\" + casasDecimais + \"}$)\";\n      partes = \".$1.$2,$3\";\n      v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    if (v.length > casasDecimais + 12) {\n      regex = \"([0-9]{3}).([0-9]{3}).([0-9]{3}),([0-9]{\" + casasDecimais + \"}$)\";\n      partes = \".$1.$2.$3,$4\";\n      v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    if (v.length > casasDecimais + 16) {\n      regex = \"([0-9]{3}).([0-9]{3}).([0-9]{3}).([0-9]{3}),([0-9]{\" + casasDecimais + \"}$)\";\n      partes = \".$1.$2.$3.$4,$5\";\n      v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    return (negativo ? \"-\" : \"\") + v;\n  }\n}\nFormatterDirective.ɵfac = function FormatterDirective_Factory(t) {\n  return new (t || FormatterDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nFormatterDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: FormatterDirective,\n  selectors: [[\"\", \"formatterDirective\", \"\"]],\n  hostBindings: function FormatterDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"ngModelChange\", function FormatterDirective_ngModelChange_HostBindingHandler($event) {\n        return ctx.onChange($event);\n      });\n    }\n  },\n  inputs: {\n    tipo: \"tipo\"\n  }\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,kBAAkB;EAO7BC,YACUC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAHb,SAAI,GAAU,EAAE;IAMrB,IAAI,CAACC,EAAE,GAAG,IAAI,CAACD,UAAU,CAACE,aAAa;EACzC;EAEAC,QAAQ;IACN,IAAI,CAACF,EAAE,CAACG,KAAK,GAAG,IAAI,CAACC,WAAW,CAAC,IAAI,CAACJ,EAAE,CAACG,KAAK,CAAC;EACjD;EAC2CE,QAAQ,CAACF,KAAS;IAC3D,IAAI,CAACH,EAAE,CAACG,KAAK,GAAG,IAAI,CAACC,WAAW,CAACD,KAAK,CAAC;EACzC;EAEAC,WAAW,CAACD,KAAY;IACtB,IAAI,IAAI,CAACG,IAAI,IAAI,gBAAgB,EAAC;MAChC,OAAO,IAAI,CAACC,sBAAsB,CAACC,MAAM,CAACL,KAAK,CAAC,EAAC,CAAC,CAAC;;IAGrD,OAAOA,KAAK;EACd;EACAI,sBAAsB,CAACE,CAAQ,EAAEC,aAAoB;IACnD;IACA;IACA,IAAIC,QAAQ,GAAG,KAAK;IACpB,IAAIF,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE;MACpBD,QAAQ,GAAG,IAAI;;IAEnBF,CAAC,GAAGA,CAAC,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAExB,IAAIC,KAAK,EAAEC,MAAM;IAEjB;IACA,IAAIN,CAAC,CAACO,MAAM,GAAGN,aAAa,EAAE;MAC1BI,KAAK,GAAG,SAAS,GAAGJ,aAAa,GAAG,KAAK;MACzCK,MAAM,GAAG,KAAK;MACdN,CAAC,GAAGA,CAAC,CAACI,OAAO,CAAC,IAAII,MAAM,CAACH,KAAK,EAAE,GAAG,CAAC,EAAEC,MAAM,CAAC;;IAEjD,IAAIN,CAAC,CAACO,MAAM,GAAGN,aAAa,GAAG,CAAC,EAAE;MAC9BI,KAAK,GAAG,oBAAoB,GAAGJ,aAAa,GAAG,KAAK;MACpDK,MAAM,GAAG,QAAQ;MACjBN,CAAC,GAAGA,CAAC,CAACI,OAAO,CAAC,IAAII,MAAM,CAACH,KAAK,EAAE,GAAG,CAAC,EAAEC,MAAM,CAAC;;IAEjD,IAAIN,CAAC,CAACO,MAAM,GAAGN,aAAa,GAAG,CAAC,EAAE;MAC9BI,KAAK,GAAG,+BAA+B,GAAGJ,aAAa,GAAG,KAAK;MAC/DK,MAAM,GAAG,WAAW;MACpBN,CAAC,GAAGA,CAAC,CAACI,OAAO,CAAC,IAAII,MAAM,CAACH,KAAK,EAAE,GAAG,CAAC,EAAEC,MAAM,CAAC;;IAEjD,IAAIN,CAAC,CAACO,MAAM,GAAGN,aAAa,GAAG,EAAE,EAAE;MAC/BI,KAAK,GAAG,0CAA0C,GAAGJ,aAAa,GAAG,KAAK;MAC1EK,MAAM,GAAG,cAAc;MACvBN,CAAC,GAAGA,CAAC,CAACI,OAAO,CAAC,IAAII,MAAM,CAACH,KAAK,EAAE,GAAG,CAAC,EAAEC,MAAM,CAAC;;IAEjD,IAAIN,CAAC,CAACO,MAAM,GAAGN,aAAa,GAAG,EAAE,EAAE;MAC/BI,KAAK,GAAG,qDAAqD,GAAGJ,aAAa,GAAG,KAAK;MACrFK,MAAM,GAAG,iBAAiB;MAC1BN,CAAC,GAAGA,CAAC,CAACI,OAAO,CAAC,IAAII,MAAM,CAACH,KAAK,EAAE,GAAG,CAAC,EAAEC,MAAM,CAAC;;IAGjD,OAAO,CAACJ,QAAQ,GAAG,GAAG,GAAG,EAAE,IAAIF,CAAC;EACpC;;AAnEaZ,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAqB;EAAAC;IAAA;;eAAlBC,oBAAgB;MAAA","names":["FormatterDirective","constructor","elementRef","el","nativeElement","ngOnInit","value","formatValue","onChange","tipo","formatValorNumeroInput","String","v","casasDecimais","negativo","charAt","replace","regex","partes","length","RegExp","selectors","hostBindings","ctx"],"sourceRoot":"","sources":["/home/tim/Tim/angular/angular-topics-study/frontend/src/app/util/formatter.directive.ts"],"sourcesContent":["import { Directive, ElementRef, HostListener, Input, OnChanges } from '@angular/core';\n\n@Directive({\n  selector: '[formatterDirective]'\n})\nexport class FormatterDirective {\n\n  private el: HTMLInputElement;\n\n  @Input('tipo')\n  public tipo:string = '';\n\n  constructor(\n    private elementRef: ElementRef,\n\n  ) {\n    this.el = this.elementRef.nativeElement;\n  }\n\n  ngOnInit() {\n    this.el.value = this.formatValue(this.el.value);\n  }\n  @HostListener('ngModelChange', ['$event']) onChange(value:any) {\n    this.el.value = this.formatValue(value);\n  }\n\n  formatValue(value:string):string {\n    if (this.tipo == 'double2Decimal'){\n      return this.formatValorNumeroInput(String(value),2);\n    }\n    \n    return value\n  }\n  formatValorNumeroInput(v:string, casasDecimais:number):string {\n    //Remove tudo o que não é dígito\n    //console.log('formatValorNumeroInput(' + v + ', ' + casasDecimais + ')');\n    var negativo = false;\n    if (v.charAt(0) == '-') {\n        negativo = true;\n    }\n    v = v.replace(/\\D/g, \"\");\n\n    var regex, partes;\n\n    //Coloca ponto entre o segundo e o terceiro dígitos\n    if (v.length > casasDecimais) {\n        regex = \"([0-9]{\" + casasDecimais + \"})$\";\n        partes = \",$1\";\n        v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    if (v.length > casasDecimais + 4) {\n        regex = \"([0-9]{3}),([0-9]{\" + casasDecimais + \"}$)\";\n        partes = \".$1,$2\";\n        v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    if (v.length > casasDecimais + 8) {\n        regex = \"([0-9]{3}).([0-9]{3}),([0-9]{\" + casasDecimais + \"}$)\";\n        partes = \".$1.$2,$3\";\n        v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    if (v.length > casasDecimais + 12) {\n        regex = \"([0-9]{3}).([0-9]{3}).([0-9]{3}),([0-9]{\" + casasDecimais + \"}$)\";\n        partes = \".$1.$2.$3,$4\";\n        v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n    if (v.length > casasDecimais + 16) {\n        regex = \"([0-9]{3}).([0-9]{3}).([0-9]{3}).([0-9]{3}),([0-9]{\" + casasDecimais + \"}$)\";\n        partes = \".$1.$2.$3.$4,$5\";\n        v = v.replace(new RegExp(regex, \"g\"), partes);\n    }\n\n    return (negativo ? \"-\" : \"\") + v;\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}